{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["mobileMax","App","props","reportWindowSize","event","setState","width","window","innerWidth","isMobile","isTablet","state","addEventListener","this","removeEventListener","className","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAGMA,EAAY,IA6CHC,E,kDAzCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAgBRC,iBAAmB,SAACC,GAClB,EAAKC,SAAS,CACZC,MAAOC,OAAOC,WACdC,SAAUF,OAAOC,YAAcR,EAC/BU,SAAYV,EAAYO,OAAOC,YAAgBD,OAAOC,YAxB1C,OAKd,EAAKG,MAAQ,CACXL,MAAOC,OAAOC,WACdC,SAAUF,OAAOC,YAAcR,EAC/BU,SAAYV,EAAYO,OAAOC,YAAgBD,OAAOC,YAR1C,KAGG,E,qDASnB,WACED,OAAOK,iBAAiB,SAAUC,KAAKV,oB,kCAGzC,WACEI,OAAOO,oBAAoB,SAAUD,KAAKV,oB,oBAW5C,WACE,MAAoCU,KAAKF,MAAjCL,EAAR,EAAQA,MAAMG,EAAd,EAAcA,SAASC,EAAvB,EAAuBA,SACvB,OACE,sBAAKK,UAAU,MAAf,oBACUT,EACPG,GACD,0CAECC,GACD,gDACA,kD,GApCUM,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d8e47020.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react'\n\nconst mobileMax = 425;\nconst tabletMax = 992;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: window.innerWidth,\n      isMobile: window.innerWidth <= mobileMax,\n      isTablet: ((mobileMax < window.innerWidth) && (window.innerWidth <= tabletMax)),\n    }\n  }\n\n  componentDidMount(){\n    window.addEventListener('resize', this.reportWindowSize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.reportWindowSize);\n  }\n\n  reportWindowSize = (event) => {\n    this.setState({ \n      width: window.innerWidth, \n      isMobile: window.innerWidth <= mobileMax, \n      isTablet: ((mobileMax < window.innerWidth) && (window.innerWidth <= tabletMax)), \n    });\n  }\n\n  render() {\n    const { width,isMobile,isTablet } = this.state;\n    return (\n      <div className=\"App\">\n        width: {width}\n        {isMobile && \n        <p>hola celu</p>\n        }\n        {isTablet &&\n        <a>link the tablet</a>}\n        <button>boton</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}